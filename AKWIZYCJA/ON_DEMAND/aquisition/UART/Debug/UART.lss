
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  00001060  000010f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00802012  00802012  00001106  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003fef  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a8a  00000000  00000000  00005259  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000020bf  00000000  00000000  00005ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00007da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00027e1b  00000000  00000000  00008008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013fd  00000000  00000000  0002fe23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00031220  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009461  00000000  00000000  00031310  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1a c1       	rjmp	.+564    	; 0x23a <__bad_interrupt>
       6:	00 00       	nop
       8:	18 c1       	rjmp	.+560    	; 0x23a <__bad_interrupt>
       a:	00 00       	nop
       c:	16 c1       	rjmp	.+556    	; 0x23a <__bad_interrupt>
       e:	00 00       	nop
      10:	14 c1       	rjmp	.+552    	; 0x23a <__bad_interrupt>
      12:	00 00       	nop
      14:	12 c1       	rjmp	.+548    	; 0x23a <__bad_interrupt>
      16:	00 00       	nop
      18:	10 c1       	rjmp	.+544    	; 0x23a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0e c1       	rjmp	.+540    	; 0x23a <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c c1       	rjmp	.+536    	; 0x23a <__bad_interrupt>
      22:	00 00       	nop
      24:	0a c1       	rjmp	.+532    	; 0x23a <__bad_interrupt>
      26:	00 00       	nop
      28:	08 c1       	rjmp	.+528    	; 0x23a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	06 c1       	rjmp	.+524    	; 0x23a <__bad_interrupt>
      2e:	00 00       	nop
      30:	04 c1       	rjmp	.+520    	; 0x23a <__bad_interrupt>
      32:	00 00       	nop
      34:	02 c1       	rjmp	.+516    	; 0x23a <__bad_interrupt>
      36:	00 00       	nop
      38:	00 c1       	rjmp	.+512    	; 0x23a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fe c0       	rjmp	.+508    	; 0x23a <__bad_interrupt>
      3e:	00 00       	nop
      40:	fc c0       	rjmp	.+504    	; 0x23a <__bad_interrupt>
      42:	00 00       	nop
      44:	fa c0       	rjmp	.+500    	; 0x23a <__bad_interrupt>
      46:	00 00       	nop
      48:	f8 c0       	rjmp	.+496    	; 0x23a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f6 c0       	rjmp	.+492    	; 0x23a <__bad_interrupt>
      4e:	00 00       	nop
      50:	f4 c0       	rjmp	.+488    	; 0x23a <__bad_interrupt>
      52:	00 00       	nop
      54:	f2 c0       	rjmp	.+484    	; 0x23a <__bad_interrupt>
      56:	00 00       	nop
      58:	f0 c0       	rjmp	.+480    	; 0x23a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ee c0       	rjmp	.+476    	; 0x23a <__bad_interrupt>
      5e:	00 00       	nop
      60:	ec c0       	rjmp	.+472    	; 0x23a <__bad_interrupt>
      62:	00 00       	nop
      64:	ea c0       	rjmp	.+468    	; 0x23a <__bad_interrupt>
      66:	00 00       	nop
      68:	e8 c0       	rjmp	.+464    	; 0x23a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e6 c0       	rjmp	.+460    	; 0x23a <__bad_interrupt>
      6e:	00 00       	nop
      70:	e4 c0       	rjmp	.+456    	; 0x23a <__bad_interrupt>
      72:	00 00       	nop
      74:	e2 c0       	rjmp	.+452    	; 0x23a <__bad_interrupt>
      76:	00 00       	nop
      78:	e0 c0       	rjmp	.+448    	; 0x23a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	de c0       	rjmp	.+444    	; 0x23a <__bad_interrupt>
      7e:	00 00       	nop
      80:	dc c0       	rjmp	.+440    	; 0x23a <__bad_interrupt>
      82:	00 00       	nop
      84:	da c0       	rjmp	.+436    	; 0x23a <__bad_interrupt>
      86:	00 00       	nop
      88:	d8 c0       	rjmp	.+432    	; 0x23a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d6 c0       	rjmp	.+428    	; 0x23a <__bad_interrupt>
      8e:	00 00       	nop
      90:	d4 c0       	rjmp	.+424    	; 0x23a <__bad_interrupt>
      92:	00 00       	nop
      94:	d2 c0       	rjmp	.+420    	; 0x23a <__bad_interrupt>
      96:	00 00       	nop
      98:	d0 c0       	rjmp	.+416    	; 0x23a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ce c0       	rjmp	.+412    	; 0x23a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cc c0       	rjmp	.+408    	; 0x23a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ca c0       	rjmp	.+404    	; 0x23a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c8 c0       	rjmp	.+400    	; 0x23a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c6 c0       	rjmp	.+396    	; 0x23a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c4 c0       	rjmp	.+392    	; 0x23a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c2 c0       	rjmp	.+388    	; 0x23a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c0 c0       	rjmp	.+384    	; 0x23a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	be c0       	rjmp	.+380    	; 0x23a <__bad_interrupt>
      be:	00 00       	nop
      c0:	bc c0       	rjmp	.+376    	; 0x23a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ba c0       	rjmp	.+372    	; 0x23a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b8 c0       	rjmp	.+368    	; 0x23a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b6 c0       	rjmp	.+364    	; 0x23a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b4 c0       	rjmp	.+360    	; 0x23a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b2 c0       	rjmp	.+356    	; 0x23a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b0 c0       	rjmp	.+352    	; 0x23a <__bad_interrupt>
      da:	00 00       	nop
      dc:	ae c0       	rjmp	.+348    	; 0x23a <__bad_interrupt>
      de:	00 00       	nop
      e0:	ac c0       	rjmp	.+344    	; 0x23a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	aa c0       	rjmp	.+340    	; 0x23a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a8 c0       	rjmp	.+336    	; 0x23a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a6 c0       	rjmp	.+332    	; 0x23a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a4 c0       	rjmp	.+328    	; 0x23a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a2 c0       	rjmp	.+324    	; 0x23a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a0 c0       	rjmp	.+320    	; 0x23a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9e c0       	rjmp	.+316    	; 0x23a <__bad_interrupt>
      fe:	00 00       	nop
     100:	9c c0       	rjmp	.+312    	; 0x23a <__bad_interrupt>
     102:	00 00       	nop
     104:	9a c0       	rjmp	.+308    	; 0x23a <__bad_interrupt>
     106:	00 00       	nop
     108:	98 c0       	rjmp	.+304    	; 0x23a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	96 c0       	rjmp	.+300    	; 0x23a <__bad_interrupt>
     10e:	00 00       	nop
     110:	94 c0       	rjmp	.+296    	; 0x23a <__bad_interrupt>
     112:	00 00       	nop
     114:	92 c0       	rjmp	.+292    	; 0x23a <__bad_interrupt>
     116:	00 00       	nop
     118:	90 c0       	rjmp	.+288    	; 0x23a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8e c0       	rjmp	.+284    	; 0x23a <__bad_interrupt>
     11e:	00 00       	nop
     120:	8c c0       	rjmp	.+280    	; 0x23a <__bad_interrupt>
     122:	00 00       	nop
     124:	8a c0       	rjmp	.+276    	; 0x23a <__bad_interrupt>
     126:	00 00       	nop
     128:	88 c0       	rjmp	.+272    	; 0x23a <__bad_interrupt>
     12a:	00 00       	nop
     12c:	86 c0       	rjmp	.+268    	; 0x23a <__bad_interrupt>
     12e:	00 00       	nop
     130:	84 c0       	rjmp	.+264    	; 0x23a <__bad_interrupt>
     132:	00 00       	nop
     134:	82 c0       	rjmp	.+260    	; 0x23a <__bad_interrupt>
     136:	00 00       	nop
     138:	80 c0       	rjmp	.+256    	; 0x23a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7e c0       	rjmp	.+252    	; 0x23a <__bad_interrupt>
     13e:	00 00       	nop
     140:	7c c0       	rjmp	.+248    	; 0x23a <__bad_interrupt>
     142:	00 00       	nop
     144:	7a c0       	rjmp	.+244    	; 0x23a <__bad_interrupt>
     146:	00 00       	nop
     148:	78 c0       	rjmp	.+240    	; 0x23a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	76 c0       	rjmp	.+236    	; 0x23a <__bad_interrupt>
     14e:	00 00       	nop
     150:	74 c0       	rjmp	.+232    	; 0x23a <__bad_interrupt>
     152:	00 00       	nop
     154:	72 c0       	rjmp	.+228    	; 0x23a <__bad_interrupt>
     156:	00 00       	nop
     158:	70 c0       	rjmp	.+224    	; 0x23a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6e c0       	rjmp	.+220    	; 0x23a <__bad_interrupt>
     15e:	00 00       	nop
     160:	6c c0       	rjmp	.+216    	; 0x23a <__bad_interrupt>
     162:	00 00       	nop
     164:	6a c0       	rjmp	.+212    	; 0x23a <__bad_interrupt>
     166:	00 00       	nop
     168:	68 c0       	rjmp	.+208    	; 0x23a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	66 c0       	rjmp	.+204    	; 0x23a <__bad_interrupt>
     16e:	00 00       	nop
     170:	64 c0       	rjmp	.+200    	; 0x23a <__bad_interrupt>
     172:	00 00       	nop
     174:	62 c0       	rjmp	.+196    	; 0x23a <__bad_interrupt>
     176:	00 00       	nop
     178:	60 c0       	rjmp	.+192    	; 0x23a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5e c0       	rjmp	.+188    	; 0x23a <__bad_interrupt>
     17e:	00 00       	nop
     180:	5c c0       	rjmp	.+184    	; 0x23a <__bad_interrupt>
     182:	00 00       	nop
     184:	5a c0       	rjmp	.+180    	; 0x23a <__bad_interrupt>
     186:	00 00       	nop
     188:	58 c0       	rjmp	.+176    	; 0x23a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	56 c0       	rjmp	.+172    	; 0x23a <__bad_interrupt>
     18e:	00 00       	nop
     190:	54 c0       	rjmp	.+168    	; 0x23a <__bad_interrupt>
     192:	00 00       	nop
     194:	52 c0       	rjmp	.+164    	; 0x23a <__bad_interrupt>
     196:	00 00       	nop
     198:	50 c0       	rjmp	.+160    	; 0x23a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4e c0       	rjmp	.+156    	; 0x23a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4c c0       	rjmp	.+152    	; 0x23a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4a c0       	rjmp	.+148    	; 0x23a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	48 c0       	rjmp	.+144    	; 0x23a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	46 c0       	rjmp	.+140    	; 0x23a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	44 c0       	rjmp	.+136    	; 0x23a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	42 c0       	rjmp	.+132    	; 0x23a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	40 c0       	rjmp	.+128    	; 0x23a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3e c0       	rjmp	.+124    	; 0x23a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3c c0       	rjmp	.+120    	; 0x23a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3a c0       	rjmp	.+116    	; 0x23a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	38 c0       	rjmp	.+112    	; 0x23a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	36 c0       	rjmp	.+108    	; 0x23a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	34 c0       	rjmp	.+104    	; 0x23a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	32 c0       	rjmp	.+100    	; 0x23a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	30 c0       	rjmp	.+96     	; 0x23a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2e c0       	rjmp	.+92     	; 0x23a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2c c0       	rjmp	.+88     	; 0x23a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2a c0       	rjmp	.+84     	; 0x23a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	28 c0       	rjmp	.+80     	; 0x23a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	26 c0       	rjmp	.+76     	; 0x23a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	24 c0       	rjmp	.+72     	; 0x23a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	22 c0       	rjmp	.+68     	; 0x23a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	20 c0       	rjmp	.+64     	; 0x23a <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e0 e6       	ldi	r30, 0x60	; 96
     214:	f0 e1       	ldi	r31, 0x10	; 16
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a2 31       	cpi	r26, 0x12	; 18
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	a2 e1       	ldi	r26, 0x12	; 18
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a2 32       	cpi	r26, 0x22	; 34
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	6b d2       	rcall	.+1238   	; 0x70e <main>
     238:	11 c7       	rjmp	.+3618   	; 0x105c <_exit>

0000023a <__bad_interrupt>:
     23a:	e2 ce       	rjmp	.-572    	; 0x0 <__vectors>

0000023c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	1f 92       	push	r1
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     246:	80 91 16 20 	lds	r24, 0x2016
     24a:	90 91 17 20 	lds	r25, 0x2017
     24e:	e0 91 12 20 	lds	r30, 0x2012
     252:	f0 91 13 20 	lds	r31, 0x2013
     256:	be 01       	movw	r22, r28
     258:	6f 5f       	subi	r22, 0xFF	; 255
     25a:	7f 4f       	sbci	r23, 0xFF	; 255
     25c:	19 95       	eicall
	return c;
     25e:	89 81       	ldd	r24, Y+1	; 0x01
}
     260:	99 27       	eor	r25, r25
     262:	87 fd       	sbrc	r24, 7
     264:	90 95       	com	r25
     266:	0f 90       	pop	r0
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     26e:	fc 01       	movw	r30, r24
     270:	81 81       	ldd	r24, Z+1	; 0x01
     272:	85 ff       	sbrs	r24, 5
     274:	fd cf       	rjmp	.-6      	; 0x270 <usart_putchar+0x2>
     276:	60 83       	st	Z, r22
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	08 95       	ret

0000027e <usart_getchar>:
     27e:	fc 01       	movw	r30, r24
     280:	81 81       	ldd	r24, Z+1	; 0x01
     282:	88 23       	and	r24, r24
     284:	ec f7       	brge	.-6      	; 0x280 <usart_getchar+0x2>
     286:	80 81       	ld	r24, Z
     288:	08 95       	ret

0000028a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     28a:	4f 92       	push	r4
     28c:	5f 92       	push	r5
     28e:	6f 92       	push	r6
     290:	7f 92       	push	r7
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
     2ac:	4a 01       	movw	r8, r20
     2ae:	5b 01       	movw	r10, r22
     2b0:	28 01       	movw	r4, r16
     2b2:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     2b4:	d9 01       	movw	r26, r18
     2b6:	c8 01       	movw	r24, r16
     2b8:	68 94       	set
     2ba:	12 f8       	bld	r1, 2
     2bc:	b6 95       	lsr	r27
     2be:	a7 95       	ror	r26
     2c0:	97 95       	ror	r25
     2c2:	87 95       	ror	r24
     2c4:	16 94       	lsr	r1
     2c6:	d1 f7       	brne	.-12     	; 0x2bc <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     2c8:	b9 01       	movw	r22, r18
     2ca:	a8 01       	movw	r20, r16
     2cc:	03 2e       	mov	r0, r19
     2ce:	36 e1       	ldi	r19, 0x16	; 22
     2d0:	76 95       	lsr	r23
     2d2:	67 95       	ror	r22
     2d4:	57 95       	ror	r21
     2d6:	47 95       	ror	r20
     2d8:	3a 95       	dec	r19
     2da:	d1 f7       	brne	.-12     	; 0x2d0 <usart_set_baudrate+0x46>
     2dc:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2de:	2c 81       	ldd	r18, Y+4	; 0x04
     2e0:	22 fd       	sbrc	r18, 2
     2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     2e4:	b6 95       	lsr	r27
     2e6:	a7 95       	ror	r26
     2e8:	97 95       	ror	r25
     2ea:	87 95       	ror	r24
		min_rate /= 2;
     2ec:	76 95       	lsr	r23
     2ee:	67 95       	ror	r22
     2f0:	57 95       	ror	r21
     2f2:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     2f4:	88 15       	cp	r24, r8
     2f6:	99 05       	cpc	r25, r9
     2f8:	aa 05       	cpc	r26, r10
     2fa:	bb 05       	cpc	r27, r11
     2fc:	08 f4       	brcc	.+2      	; 0x300 <usart_set_baudrate+0x76>
     2fe:	a2 c0       	rjmp	.+324    	; 0x444 <usart_set_baudrate+0x1ba>
     300:	84 16       	cp	r8, r20
     302:	95 06       	cpc	r9, r21
     304:	a6 06       	cpc	r10, r22
     306:	b7 06       	cpc	r11, r23
     308:	08 f4       	brcc	.+2      	; 0x30c <usart_set_baudrate+0x82>
     30a:	9e c0       	rjmp	.+316    	; 0x448 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     30c:	8c 81       	ldd	r24, Y+4	; 0x04
     30e:	82 fd       	sbrc	r24, 2
     310:	04 c0       	rjmp	.+8      	; 0x31a <usart_set_baudrate+0x90>
		baud *= 2;
     312:	88 0c       	add	r8, r8
     314:	99 1c       	adc	r9, r9
     316:	aa 1c       	adc	r10, r10
     318:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     31a:	c3 01       	movw	r24, r6
     31c:	b2 01       	movw	r22, r4
     31e:	a5 01       	movw	r20, r10
     320:	94 01       	movw	r18, r8
     322:	49 d2       	rcall	.+1170   	; 0x7b6 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     324:	2f 3f       	cpi	r18, 0xFF	; 255
     326:	31 05       	cpc	r19, r1
     328:	41 05       	cpc	r20, r1
     32a:	51 05       	cpc	r21, r1
     32c:	08 f4       	brcc	.+2      	; 0x330 <usart_set_baudrate+0xa6>
     32e:	8e c0       	rjmp	.+284    	; 0x44c <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     330:	c1 2c       	mov	r12, r1
     332:	d1 2c       	mov	r13, r1
     334:	76 01       	movw	r14, r12
     336:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     338:	19 ef       	ldi	r17, 0xF9	; 249
     33a:	05 c0       	rjmp	.+10     	; 0x346 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     33c:	2c 15       	cp	r18, r12
     33e:	3d 05       	cpc	r19, r13
     340:	4e 05       	cpc	r20, r14
     342:	5f 05       	cpc	r21, r15
     344:	68 f0       	brcs	.+26     	; 0x360 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     346:	cc 0c       	add	r12, r12
     348:	dd 1c       	adc	r13, r13
     34a:	ee 1c       	adc	r14, r14
     34c:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     34e:	1d 3f       	cpi	r17, 0xFD	; 253
     350:	14 f4       	brge	.+4      	; 0x356 <usart_set_baudrate+0xcc>
			limit |= 1;
     352:	68 94       	set
     354:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     356:	1f 5f       	subi	r17, 0xFF	; 255
     358:	17 30       	cpi	r17, 0x07	; 7
     35a:	81 f7       	brne	.-32     	; 0x33c <usart_set_baudrate+0xb2>
     35c:	21 2f       	mov	r18, r17
     35e:	4e c0       	rjmp	.+156    	; 0x3fc <usart_set_baudrate+0x172>
     360:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     362:	11 23       	and	r17, r17
     364:	0c f0       	brlt	.+2      	; 0x368 <usart_set_baudrate+0xde>
     366:	4a c0       	rjmp	.+148    	; 0x3fc <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     368:	d5 01       	movw	r26, r10
     36a:	c4 01       	movw	r24, r8
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	aa 1f       	adc	r26, r26
     372:	bb 1f       	adc	r27, r27
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	aa 1f       	adc	r26, r26
     37a:	bb 1f       	adc	r27, r27
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	aa 1f       	adc	r26, r26
     382:	bb 1f       	adc	r27, r27
     384:	48 1a       	sub	r4, r24
     386:	59 0a       	sbc	r5, r25
     388:	6a 0a       	sbc	r6, r26
     38a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     38c:	1e 3f       	cpi	r17, 0xFE	; 254
     38e:	ec f4       	brge	.+58     	; 0x3ca <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     390:	6d ef       	ldi	r22, 0xFD	; 253
     392:	7f ef       	ldi	r23, 0xFF	; 255
     394:	61 1b       	sub	r22, r17
     396:	71 09       	sbc	r23, r1
     398:	17 fd       	sbrc	r17, 7
     39a:	73 95       	inc	r23
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <usart_set_baudrate+0x11c>
     39e:	44 0c       	add	r4, r4
     3a0:	55 1c       	adc	r5, r5
     3a2:	66 1c       	adc	r6, r6
     3a4:	77 1c       	adc	r7, r7
     3a6:	6a 95       	dec	r22
     3a8:	d2 f7       	brpl	.-12     	; 0x39e <usart_set_baudrate+0x114>
     3aa:	d5 01       	movw	r26, r10
     3ac:	c4 01       	movw	r24, r8
     3ae:	b6 95       	lsr	r27
     3b0:	a7 95       	ror	r26
     3b2:	97 95       	ror	r25
     3b4:	87 95       	ror	r24
     3b6:	bc 01       	movw	r22, r24
     3b8:	cd 01       	movw	r24, r26
     3ba:	64 0d       	add	r22, r4
     3bc:	75 1d       	adc	r23, r5
     3be:	86 1d       	adc	r24, r6
     3c0:	97 1d       	adc	r25, r7
     3c2:	a5 01       	movw	r20, r10
     3c4:	94 01       	movw	r18, r8
     3c6:	f7 d1       	rcall	.+1006   	; 0x7b6 <__udivmodsi4>
     3c8:	34 c0       	rjmp	.+104    	; 0x432 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     3ca:	23 e0       	ldi	r18, 0x03	; 3
     3cc:	21 0f       	add	r18, r17
     3ce:	d5 01       	movw	r26, r10
     3d0:	c4 01       	movw	r24, r8
     3d2:	04 c0       	rjmp	.+8      	; 0x3dc <usart_set_baudrate+0x152>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	aa 1f       	adc	r26, r26
     3da:	bb 1f       	adc	r27, r27
     3dc:	2a 95       	dec	r18
     3de:	d2 f7       	brpl	.-12     	; 0x3d4 <usart_set_baudrate+0x14a>
     3e0:	9c 01       	movw	r18, r24
     3e2:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     3e4:	b6 95       	lsr	r27
     3e6:	a7 95       	ror	r26
     3e8:	97 95       	ror	r25
     3ea:	87 95       	ror	r24
     3ec:	bc 01       	movw	r22, r24
     3ee:	cd 01       	movw	r24, r26
     3f0:	64 0d       	add	r22, r4
     3f2:	75 1d       	adc	r23, r5
     3f4:	86 1d       	adc	r24, r6
     3f6:	97 1d       	adc	r25, r7
     3f8:	de d1       	rcall	.+956    	; 0x7b6 <__udivmodsi4>
     3fa:	1b c0       	rjmp	.+54     	; 0x432 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     3fc:	2d 5f       	subi	r18, 0xFD	; 253
     3fe:	d5 01       	movw	r26, r10
     400:	c4 01       	movw	r24, r8
     402:	04 c0       	rjmp	.+8      	; 0x40c <usart_set_baudrate+0x182>
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	aa 1f       	adc	r26, r26
     40a:	bb 1f       	adc	r27, r27
     40c:	2a 95       	dec	r18
     40e:	d2 f7       	brpl	.-12     	; 0x404 <usart_set_baudrate+0x17a>
     410:	9c 01       	movw	r18, r24
     412:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     414:	b6 95       	lsr	r27
     416:	a7 95       	ror	r26
     418:	97 95       	ror	r25
     41a:	87 95       	ror	r24
     41c:	bc 01       	movw	r22, r24
     41e:	cd 01       	movw	r24, r26
     420:	64 0d       	add	r22, r4
     422:	75 1d       	adc	r23, r5
     424:	86 1d       	adc	r24, r6
     426:	97 1d       	adc	r25, r7
     428:	c6 d1       	rcall	.+908    	; 0x7b6 <__udivmodsi4>
     42a:	21 50       	subi	r18, 0x01	; 1
     42c:	31 09       	sbc	r19, r1
     42e:	41 09       	sbc	r20, r1
     430:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     432:	83 2f       	mov	r24, r19
     434:	8f 70       	andi	r24, 0x0F	; 15
     436:	12 95       	swap	r17
     438:	10 7f       	andi	r17, 0xF0	; 240
     43a:	18 2b       	or	r17, r24
     43c:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     43e:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	18 c0       	rjmp	.+48     	; 0x474 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	16 c0       	rjmp	.+44     	; 0x474 <usart_set_baudrate+0x1ea>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	14 c0       	rjmp	.+40     	; 0x474 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     44c:	d5 01       	movw	r26, r10
     44e:	c4 01       	movw	r24, r8
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	aa 1f       	adc	r26, r26
     456:	bb 1f       	adc	r27, r27
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	aa 1f       	adc	r26, r26
     45e:	bb 1f       	adc	r27, r27
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	aa 1f       	adc	r26, r26
     466:	bb 1f       	adc	r27, r27
     468:	48 1a       	sub	r4, r24
     46a:	59 0a       	sbc	r5, r25
     46c:	6a 0a       	sbc	r6, r26
     46e:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     470:	19 ef       	ldi	r17, 0xF9	; 249
     472:	8e cf       	rjmp	.-228    	; 0x390 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	df 90       	pop	r13
     482:	cf 90       	pop	r12
     484:	bf 90       	pop	r11
     486:	af 90       	pop	r10
     488:	9f 90       	pop	r9
     48a:	8f 90       	pop	r8
     48c:	7f 90       	pop	r7
     48e:	6f 90       	pop	r6
     490:	5f 90       	pop	r5
     492:	4f 90       	pop	r4
     494:	08 95       	ret

00000496 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	ec 01       	movw	r28, r24
     4a0:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <usart_init_rs232+0x12>
     4a6:	e6 c0       	rjmp	.+460    	; 0x674 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     4a8:	80 3c       	cpi	r24, 0xC0	; 192
     4aa:	91 05       	cpc	r25, r1
     4ac:	21 f4       	brne	.+8      	; 0x4b6 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     4ae:	60 e1       	ldi	r22, 0x10	; 16
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	17 d1       	rcall	.+558    	; 0x6e2 <sysclk_enable_module>
     4b4:	df c0       	rjmp	.+446    	; 0x674 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     4b6:	c0 38       	cpi	r28, 0x80	; 128
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	d8 07       	cpc	r29, r24
     4bc:	21 f4       	brne	.+8      	; 0x4c6 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     4be:	62 e0       	ldi	r22, 0x02	; 2
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0f d1       	rcall	.+542    	; 0x6e2 <sysclk_enable_module>
     4c4:	d7 c0       	rjmp	.+430    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     4c6:	c1 15       	cp	r28, r1
     4c8:	e1 e0       	ldi	r30, 0x01	; 1
     4ca:	de 07       	cpc	r29, r30
     4cc:	21 f4       	brne	.+8      	; 0x4d6 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	07 d1       	rcall	.+526    	; 0x6e2 <sysclk_enable_module>
     4d4:	cf c0       	rjmp	.+414    	; 0x674 <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     4d6:	c0 38       	cpi	r28, 0x80	; 128
     4d8:	f3 e0       	ldi	r31, 0x03	; 3
     4da:	df 07       	cpc	r29, r31
     4dc:	21 f4       	brne	.+8      	; 0x4e6 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	ff d0       	rcall	.+510    	; 0x6e2 <sysclk_enable_module>
     4e4:	c7 c0       	rjmp	.+398    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     4e6:	c0 39       	cpi	r28, 0x90	; 144
     4e8:	83 e0       	ldi	r24, 0x03	; 3
     4ea:	d8 07       	cpc	r29, r24
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	f7 d0       	rcall	.+494    	; 0x6e2 <sysclk_enable_module>
     4f4:	bf c0       	rjmp	.+382    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     4f6:	c1 15       	cp	r28, r1
     4f8:	e2 e0       	ldi	r30, 0x02	; 2
     4fa:	de 07       	cpc	r29, r30
     4fc:	21 f4       	brne	.+8      	; 0x506 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	ef d0       	rcall	.+478    	; 0x6e2 <sysclk_enable_module>
     504:	b7 c0       	rjmp	.+366    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     506:	c0 34       	cpi	r28, 0x40	; 64
     508:	f2 e0       	ldi	r31, 0x02	; 2
     50a:	df 07       	cpc	r29, r31
     50c:	21 f4       	brne	.+8      	; 0x516 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	e7 d0       	rcall	.+462    	; 0x6e2 <sysclk_enable_module>
     514:	af c0       	rjmp	.+350    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     516:	c0 32       	cpi	r28, 0x20	; 32
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	d8 07       	cpc	r29, r24
     51c:	21 f4       	brne	.+8      	; 0x526 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     51e:	64 e0       	ldi	r22, 0x04	; 4
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	df d0       	rcall	.+446    	; 0x6e2 <sysclk_enable_module>
     524:	a7 c0       	rjmp	.+334    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     526:	c1 15       	cp	r28, r1
     528:	e8 e0       	ldi	r30, 0x08	; 8
     52a:	de 07       	cpc	r29, r30
     52c:	21 f4       	brne	.+8      	; 0x536 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	d7 d0       	rcall	.+430    	; 0x6e2 <sysclk_enable_module>
     534:	9f c0       	rjmp	.+318    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     536:	c1 15       	cp	r28, r1
     538:	f9 e0       	ldi	r31, 0x09	; 9
     53a:	df 07       	cpc	r29, r31
     53c:	21 f4       	brne	.+8      	; 0x546 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	cf d0       	rcall	.+414    	; 0x6e2 <sysclk_enable_module>
     544:	97 c0       	rjmp	.+302    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     546:	c1 15       	cp	r28, r1
     548:	8a e0       	ldi	r24, 0x0A	; 10
     54a:	d8 07       	cpc	r29, r24
     54c:	21 f4       	brne	.+8      	; 0x556 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	85 e0       	ldi	r24, 0x05	; 5
     552:	c7 d0       	rcall	.+398    	; 0x6e2 <sysclk_enable_module>
     554:	8f c0       	rjmp	.+286    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     556:	c1 15       	cp	r28, r1
     558:	eb e0       	ldi	r30, 0x0B	; 11
     55a:	de 07       	cpc	r29, r30
     55c:	21 f4       	brne	.+8      	; 0x566 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	86 e0       	ldi	r24, 0x06	; 6
     562:	bf d0       	rcall	.+382    	; 0x6e2 <sysclk_enable_module>
     564:	87 c0       	rjmp	.+270    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     566:	c0 34       	cpi	r28, 0x40	; 64
     568:	f8 e0       	ldi	r31, 0x08	; 8
     56a:	df 07       	cpc	r29, r31
     56c:	21 f4       	brne	.+8      	; 0x576 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     56e:	62 e0       	ldi	r22, 0x02	; 2
     570:	83 e0       	ldi	r24, 0x03	; 3
     572:	b7 d0       	rcall	.+366    	; 0x6e2 <sysclk_enable_module>
     574:	7f c0       	rjmp	.+254    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     576:	c0 34       	cpi	r28, 0x40	; 64
     578:	89 e0       	ldi	r24, 0x09	; 9
     57a:	d8 07       	cpc	r29, r24
     57c:	21 f4       	brne	.+8      	; 0x586 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     57e:	62 e0       	ldi	r22, 0x02	; 2
     580:	84 e0       	ldi	r24, 0x04	; 4
     582:	af d0       	rcall	.+350    	; 0x6e2 <sysclk_enable_module>
     584:	77 c0       	rjmp	.+238    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     586:	c0 34       	cpi	r28, 0x40	; 64
     588:	ea e0       	ldi	r30, 0x0A	; 10
     58a:	de 07       	cpc	r29, r30
     58c:	21 f4       	brne	.+8      	; 0x596 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     58e:	62 e0       	ldi	r22, 0x02	; 2
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	a7 d0       	rcall	.+334    	; 0x6e2 <sysclk_enable_module>
     594:	6f c0       	rjmp	.+222    	; 0x674 <usart_init_rs232+0x1de>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     596:	c0 39       	cpi	r28, 0x90	; 144
     598:	f8 e0       	ldi	r31, 0x08	; 8
     59a:	df 07       	cpc	r29, r31
     59c:	21 f4       	brne	.+8      	; 0x5a6 <usart_init_rs232+0x110>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     59e:	64 e0       	ldi	r22, 0x04	; 4
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	9f d0       	rcall	.+318    	; 0x6e2 <sysclk_enable_module>
     5a4:	67 c0       	rjmp	.+206    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     5a6:	c0 39       	cpi	r28, 0x90	; 144
     5a8:	89 e0       	ldi	r24, 0x09	; 9
     5aa:	d8 07       	cpc	r29, r24
     5ac:	21 f4       	brne	.+8      	; 0x5b6 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     5ae:	64 e0       	ldi	r22, 0x04	; 4
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	97 d0       	rcall	.+302    	; 0x6e2 <sysclk_enable_module>
     5b4:	5f c0       	rjmp	.+190    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     5b6:	c0 39       	cpi	r28, 0x90	; 144
     5b8:	ea e0       	ldi	r30, 0x0A	; 10
     5ba:	de 07       	cpc	r29, r30
     5bc:	21 f4       	brne	.+8      	; 0x5c6 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     5be:	64 e0       	ldi	r22, 0x04	; 4
     5c0:	85 e0       	ldi	r24, 0x05	; 5
     5c2:	8f d0       	rcall	.+286    	; 0x6e2 <sysclk_enable_module>
     5c4:	57 c0       	rjmp	.+174    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     5c6:	c0 39       	cpi	r28, 0x90	; 144
     5c8:	fb e0       	ldi	r31, 0x0B	; 11
     5ca:	df 07       	cpc	r29, r31
     5cc:	21 f4       	brne	.+8      	; 0x5d6 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     5ce:	64 e0       	ldi	r22, 0x04	; 4
     5d0:	86 e0       	ldi	r24, 0x06	; 6
     5d2:	87 d0       	rcall	.+270    	; 0x6e2 <sysclk_enable_module>
     5d4:	4f c0       	rjmp	.+158    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     5d6:	c0 3c       	cpi	r28, 0xC0	; 192
     5d8:	88 e0       	ldi	r24, 0x08	; 8
     5da:	d8 07       	cpc	r29, r24
     5dc:	21 f4       	brne	.+8      	; 0x5e6 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     5de:	68 e0       	ldi	r22, 0x08	; 8
     5e0:	83 e0       	ldi	r24, 0x03	; 3
     5e2:	7f d0       	rcall	.+254    	; 0x6e2 <sysclk_enable_module>
     5e4:	47 c0       	rjmp	.+142    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     5e6:	c0 3c       	cpi	r28, 0xC0	; 192
     5e8:	e9 e0       	ldi	r30, 0x09	; 9
     5ea:	de 07       	cpc	r29, r30
     5ec:	21 f4       	brne	.+8      	; 0x5f6 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     5ee:	68 e0       	ldi	r22, 0x08	; 8
     5f0:	84 e0       	ldi	r24, 0x04	; 4
     5f2:	77 d0       	rcall	.+238    	; 0x6e2 <sysclk_enable_module>
     5f4:	3f c0       	rjmp	.+126    	; 0x674 <usart_init_rs232+0x1de>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     5f6:	c0 3a       	cpi	r28, 0xA0	; 160
     5f8:	f8 e0       	ldi	r31, 0x08	; 8
     5fa:	df 07       	cpc	r29, r31
     5fc:	21 f4       	brne	.+8      	; 0x606 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     5fe:	60 e1       	ldi	r22, 0x10	; 16
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	6f d0       	rcall	.+222    	; 0x6e2 <sysclk_enable_module>
     604:	37 c0       	rjmp	.+110    	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     606:	c0 3a       	cpi	r28, 0xA0	; 160
     608:	89 e0       	ldi	r24, 0x09	; 9
     60a:	d8 07       	cpc	r29, r24
     60c:	21 f4       	brne	.+8      	; 0x616 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     60e:	60 e1       	ldi	r22, 0x10	; 16
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	67 d0       	rcall	.+206    	; 0x6e2 <sysclk_enable_module>
     614:	2f c0       	rjmp	.+94     	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     616:	c0 3a       	cpi	r28, 0xA0	; 160
     618:	ea e0       	ldi	r30, 0x0A	; 10
     61a:	de 07       	cpc	r29, r30
     61c:	21 f4       	brne	.+8      	; 0x626 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     61e:	60 e1       	ldi	r22, 0x10	; 16
     620:	85 e0       	ldi	r24, 0x05	; 5
     622:	5f d0       	rcall	.+190    	; 0x6e2 <sysclk_enable_module>
     624:	27 c0       	rjmp	.+78     	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     626:	c0 3a       	cpi	r28, 0xA0	; 160
     628:	fb e0       	ldi	r31, 0x0B	; 11
     62a:	df 07       	cpc	r29, r31
     62c:	21 f4       	brne	.+8      	; 0x636 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     62e:	60 e1       	ldi	r22, 0x10	; 16
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	57 d0       	rcall	.+174    	; 0x6e2 <sysclk_enable_module>
     634:	1f c0       	rjmp	.+62     	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     636:	c0 3b       	cpi	r28, 0xB0	; 176
     638:	88 e0       	ldi	r24, 0x08	; 8
     63a:	d8 07       	cpc	r29, r24
     63c:	21 f4       	brne	.+8      	; 0x646 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     63e:	60 e2       	ldi	r22, 0x20	; 32
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	4f d0       	rcall	.+158    	; 0x6e2 <sysclk_enable_module>
     644:	17 c0       	rjmp	.+46     	; 0x674 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     646:	c0 3b       	cpi	r28, 0xB0	; 176
     648:	e9 e0       	ldi	r30, 0x09	; 9
     64a:	de 07       	cpc	r29, r30
     64c:	21 f4       	brne	.+8      	; 0x656 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     64e:	60 e2       	ldi	r22, 0x20	; 32
     650:	84 e0       	ldi	r24, 0x04	; 4
     652:	47 d0       	rcall	.+142    	; 0x6e2 <sysclk_enable_module>
     654:	0f c0       	rjmp	.+30     	; 0x674 <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     656:	c0 38       	cpi	r28, 0x80	; 128
     658:	f4 e0       	ldi	r31, 0x04	; 4
     65a:	df 07       	cpc	r29, r31
     65c:	21 f4       	brne	.+8      	; 0x666 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     65e:	60 e4       	ldi	r22, 0x40	; 64
     660:	83 e0       	ldi	r24, 0x03	; 3
     662:	3f d0       	rcall	.+126    	; 0x6e2 <sysclk_enable_module>
     664:	07 c0       	rjmp	.+14     	; 0x674 <usart_init_rs232+0x1de>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     666:	c0 3a       	cpi	r28, 0xA0	; 160
     668:	84 e0       	ldi	r24, 0x04	; 4
     66a:	d8 07       	cpc	r29, r24
     66c:	19 f4       	brne	.+6      	; 0x674 <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     66e:	60 e4       	ldi	r22, 0x40	; 64
     670:	85 e0       	ldi	r24, 0x05	; 5
     672:	37 d0       	rcall	.+110    	; 0x6e2 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     674:	8d 81       	ldd	r24, Y+5	; 0x05
     676:	8f 73       	andi	r24, 0x3F	; 63
     678:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     67a:	f8 01       	movw	r30, r16
     67c:	94 81       	ldd	r25, Z+4	; 0x04
     67e:	85 81       	ldd	r24, Z+5	; 0x05
     680:	89 2b       	or	r24, r25
     682:	96 81       	ldd	r25, Z+6	; 0x06
     684:	99 23       	and	r25, r25
     686:	11 f0       	breq	.+4      	; 0x68c <usart_init_rs232+0x1f6>
     688:	98 e0       	ldi	r25, 0x08	; 8
     68a:	01 c0       	rjmp	.+2      	; 0x68e <usart_init_rs232+0x1f8>
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	89 2b       	or	r24, r25
     690:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     692:	f8 01       	movw	r30, r16
     694:	40 81       	ld	r20, Z
     696:	51 81       	ldd	r21, Z+1	; 0x01
     698:	62 81       	ldd	r22, Z+2	; 0x02
     69a:	73 81       	ldd	r23, Z+3	; 0x03
     69c:	00 e8       	ldi	r16, 0x80	; 128
     69e:	14 e8       	ldi	r17, 0x84	; 132
     6a0:	2e e1       	ldi	r18, 0x1E	; 30
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	ce 01       	movw	r24, r28
     6a6:	f1 dd       	rcall	.-1054   	; 0x28a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     6a8:	9c 81       	ldd	r25, Y+4	; 0x04
     6aa:	98 60       	ori	r25, 0x08	; 8
     6ac:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	90 61       	ori	r25, 0x10	; 16
     6b2:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	08 95       	ret

000006be <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     6be:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     6c0:	80 91 16 20 	lds	r24, 0x2016
     6c4:	90 91 17 20 	lds	r25, 0x2017
     6c8:	e0 91 14 20 	lds	r30, 0x2014
     6cc:	f0 91 15 20 	lds	r31, 0x2015
     6d0:	19 95       	eicall
     6d2:	99 23       	and	r25, r25
     6d4:	1c f4       	brge	.+6      	; 0x6dc <_write+0x1e>
		return -1;
     6d6:	8f ef       	ldi	r24, 0xFF	; 255
     6d8:	9f ef       	ldi	r25, 0xFF	; 255
     6da:	08 95       	ret
	}
	return 1;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
}
     6e0:	08 95       	ret

000006e2 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     6e2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     6e4:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     6e6:	e8 2f       	mov	r30, r24
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	e0 59       	subi	r30, 0x90	; 144
     6ec:	ff 4f       	sbci	r31, 0xFF	; 255
     6ee:	60 95       	com	r22
     6f0:	80 81       	ld	r24, Z
     6f2:	68 23       	and	r22, r24
     6f4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6f6:	9f bf       	out	0x3f, r25	; 63
     6f8:	08 95       	ret

000006fa <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     700:	be dd       	rcall	.-1156   	; 0x27e <usart_getchar>
     702:	88 83       	st	Y, r24
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     70a:	b1 cd       	rjmp	.-1182   	; 0x26e <usart_putchar>
}
     70c:	08 95       	ret

0000070e <main>:
#include <asf.h>

#define UART_TXPIN IOPORT_CREATE_PIN(PORTE, 3)


int main (void) {
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	27 97       	sbiw	r28, 0x07	; 7
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	de bf       	out	0x3e, r29	; 62
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     71c:	80 ea       	ldi	r24, 0xA0	; 160
     71e:	9a e0       	ldi	r25, 0x0A	; 10
     720:	80 93 16 20 	sts	0x2016, r24
     724:	90 93 17 20 	sts	0x2017, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     728:	85 e8       	ldi	r24, 0x85	; 133
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	80 93 14 20 	sts	0x2014, r24
     730:	90 93 15 20 	sts	0x2015, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     734:	8d e7       	ldi	r24, 0x7D	; 125
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	80 93 12 20 	sts	0x2012, r24
     73c:	90 93 13 20 	sts	0x2013, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     740:	80 91 0a 20 	lds	r24, 0x200A
     744:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     746:	80 91 0b 20 	lds	r24, 0x200B
     74a:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     74c:	80 91 0c 20 	lds	r24, 0x200C
     750:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     752:	80 91 06 20 	lds	r24, 0x2006
     756:	90 91 07 20 	lds	r25, 0x2007
     75a:	a0 91 08 20 	lds	r26, 0x2008
     75e:	b0 91 09 20 	lds	r27, 0x2009
     762:	89 83       	std	Y+1, r24	; 0x01
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	ab 83       	std	Y+3, r26	; 0x03
     768:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     76a:	60 e1       	ldi	r22, 0x10	; 16
     76c:	85 e0       	ldi	r24, 0x05	; 5
     76e:	b9 df       	rcall	.-142    	; 0x6e2 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     770:	be 01       	movw	r22, r28
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	80 ea       	ldi	r24, 0xA0	; 160
     778:	9a e0       	ldi	r25, 0x0A	; 10
     77a:	8d de       	rcall	.-742    	; 0x496 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     77c:	6e e1       	ldi	r22, 0x1E	; 30
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	8f e5       	ldi	r24, 0x5F	; 95
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	3a d0       	rcall	.+116    	; 0x7fa <fdevopen>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     786:	88 e0       	ldi	r24, 0x08	; 8
     788:	e0 e8       	ldi	r30, 0x80	; 128
     78a:	f6 e0       	ldi	r31, 0x06	; 6
     78c:	81 83       	std	Z+1, r24	; 0x01
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = false
	};
	
	int iCounter=0;
     78e:	00 e0       	ldi	r16, 0x00	; 0
     790:	10 e0       	ldi	r17, 0x00	; 0
	stdio_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	
	while(1) {
		printf("%i \r",iCounter);
     792:	0f 2e       	mov	r0, r31
     794:	fd e0       	ldi	r31, 0x0D	; 13
     796:	ef 2e       	mov	r14, r31
     798:	f0 e2       	ldi	r31, 0x20	; 32
     79a:	ff 2e       	mov	r15, r31
     79c:	f0 2d       	mov	r31, r0
     79e:	1f 93       	push	r17
     7a0:	0f 93       	push	r16
     7a2:	ff 92       	push	r15
     7a4:	ef 92       	push	r14
     7a6:	73 d0       	rcall	.+230    	; 0x88e <printf>
		iCounter++;		
     7a8:	0f 5f       	subi	r16, 0xFF	; 255
     7aa:	1f 4f       	sbci	r17, 0xFF	; 255
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	f4 cf       	rjmp	.-24     	; 0x79e <main+0x90>

000007b6 <__udivmodsi4>:
     7b6:	a1 e2       	ldi	r26, 0x21	; 33
     7b8:	1a 2e       	mov	r1, r26
     7ba:	aa 1b       	sub	r26, r26
     7bc:	bb 1b       	sub	r27, r27
     7be:	fd 01       	movw	r30, r26
     7c0:	0d c0       	rjmp	.+26     	; 0x7dc <__udivmodsi4_ep>

000007c2 <__udivmodsi4_loop>:
     7c2:	aa 1f       	adc	r26, r26
     7c4:	bb 1f       	adc	r27, r27
     7c6:	ee 1f       	adc	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	a2 17       	cp	r26, r18
     7cc:	b3 07       	cpc	r27, r19
     7ce:	e4 07       	cpc	r30, r20
     7d0:	f5 07       	cpc	r31, r21
     7d2:	20 f0       	brcs	.+8      	; 0x7dc <__udivmodsi4_ep>
     7d4:	a2 1b       	sub	r26, r18
     7d6:	b3 0b       	sbc	r27, r19
     7d8:	e4 0b       	sbc	r30, r20
     7da:	f5 0b       	sbc	r31, r21

000007dc <__udivmodsi4_ep>:
     7dc:	66 1f       	adc	r22, r22
     7de:	77 1f       	adc	r23, r23
     7e0:	88 1f       	adc	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	1a 94       	dec	r1
     7e6:	69 f7       	brne	.-38     	; 0x7c2 <__udivmodsi4_loop>
     7e8:	60 95       	com	r22
     7ea:	70 95       	com	r23
     7ec:	80 95       	com	r24
     7ee:	90 95       	com	r25
     7f0:	9b 01       	movw	r18, r22
     7f2:	ac 01       	movw	r20, r24
     7f4:	bd 01       	movw	r22, r26
     7f6:	cf 01       	movw	r24, r30
     7f8:	08 95       	ret

000007fa <fdevopen>:
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
     804:	8b 01       	movw	r16, r22
     806:	00 97       	sbiw	r24, 0x00	; 0
     808:	31 f4       	brne	.+12     	; 0x816 <fdevopen+0x1c>
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	19 f4       	brne	.+6      	; 0x816 <fdevopen+0x1c>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	37 c0       	rjmp	.+110    	; 0x884 <fdevopen+0x8a>
     816:	6e e0       	ldi	r22, 0x0E	; 14
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	30 d2       	rcall	.+1120   	; 0xc80 <calloc>
     820:	fc 01       	movw	r30, r24
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	a9 f3       	breq	.-22     	; 0x810 <fdevopen+0x16>
     826:	80 e8       	ldi	r24, 0x80	; 128
     828:	83 83       	std	Z+3, r24	; 0x03
     82a:	01 15       	cp	r16, r1
     82c:	11 05       	cpc	r17, r1
     82e:	71 f0       	breq	.+28     	; 0x84c <fdevopen+0x52>
     830:	02 87       	std	Z+10, r16	; 0x0a
     832:	13 87       	std	Z+11, r17	; 0x0b
     834:	81 e8       	ldi	r24, 0x81	; 129
     836:	83 83       	std	Z+3, r24	; 0x03
     838:	80 91 18 20 	lds	r24, 0x2018
     83c:	90 91 19 20 	lds	r25, 0x2019
     840:	89 2b       	or	r24, r25
     842:	21 f4       	brne	.+8      	; 0x84c <fdevopen+0x52>
     844:	e0 93 18 20 	sts	0x2018, r30
     848:	f0 93 19 20 	sts	0x2019, r31
     84c:	20 97       	sbiw	r28, 0x00	; 0
     84e:	c9 f0       	breq	.+50     	; 0x882 <fdevopen+0x88>
     850:	c0 87       	std	Z+8, r28	; 0x08
     852:	d1 87       	std	Z+9, r29	; 0x09
     854:	83 81       	ldd	r24, Z+3	; 0x03
     856:	82 60       	ori	r24, 0x02	; 2
     858:	83 83       	std	Z+3, r24	; 0x03
     85a:	80 91 1a 20 	lds	r24, 0x201A
     85e:	90 91 1b 20 	lds	r25, 0x201B
     862:	89 2b       	or	r24, r25
     864:	71 f4       	brne	.+28     	; 0x882 <fdevopen+0x88>
     866:	e0 93 1a 20 	sts	0x201A, r30
     86a:	f0 93 1b 20 	sts	0x201B, r31
     86e:	80 91 1c 20 	lds	r24, 0x201C
     872:	90 91 1d 20 	lds	r25, 0x201D
     876:	89 2b       	or	r24, r25
     878:	21 f4       	brne	.+8      	; 0x882 <fdevopen+0x88>
     87a:	e0 93 1c 20 	sts	0x201C, r30
     87e:	f0 93 1d 20 	sts	0x201D, r31
     882:	cf 01       	movw	r24, r30
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	08 95       	ret

0000088e <printf>:
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	fe 01       	movw	r30, r28
     898:	36 96       	adiw	r30, 0x06	; 6
     89a:	61 91       	ld	r22, Z+
     89c:	71 91       	ld	r23, Z+
     89e:	af 01       	movw	r20, r30
     8a0:	80 91 1a 20 	lds	r24, 0x201A
     8a4:	90 91 1b 20 	lds	r25, 0x201B
     8a8:	03 d0       	rcall	.+6      	; 0x8b0 <vfprintf>
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <vfprintf>:
     8b0:	2f 92       	push	r2
     8b2:	3f 92       	push	r3
     8b4:	4f 92       	push	r4
     8b6:	5f 92       	push	r5
     8b8:	6f 92       	push	r6
     8ba:	7f 92       	push	r7
     8bc:	8f 92       	push	r8
     8be:	9f 92       	push	r9
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	2c 97       	sbiw	r28, 0x0c	; 12
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	7c 01       	movw	r14, r24
     8e0:	6b 01       	movw	r12, r22
     8e2:	8a 01       	movw	r16, r20
     8e4:	fc 01       	movw	r30, r24
     8e6:	16 82       	std	Z+6, r1	; 0x06
     8e8:	17 82       	std	Z+7, r1	; 0x07
     8ea:	83 81       	ldd	r24, Z+3	; 0x03
     8ec:	81 ff       	sbrs	r24, 1
     8ee:	b0 c1       	rjmp	.+864    	; 0xc50 <vfprintf+0x3a0>
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	4c 01       	movw	r8, r24
     8f6:	f7 01       	movw	r30, r14
     8f8:	93 81       	ldd	r25, Z+3	; 0x03
     8fa:	f6 01       	movw	r30, r12
     8fc:	93 fd       	sbrc	r25, 3
     8fe:	85 91       	lpm	r24, Z+
     900:	93 ff       	sbrs	r25, 3
     902:	81 91       	ld	r24, Z+
     904:	6f 01       	movw	r12, r30
     906:	88 23       	and	r24, r24
     908:	09 f4       	brne	.+2      	; 0x90c <vfprintf+0x5c>
     90a:	9e c1       	rjmp	.+828    	; 0xc48 <vfprintf+0x398>
     90c:	85 32       	cpi	r24, 0x25	; 37
     90e:	39 f4       	brne	.+14     	; 0x91e <vfprintf+0x6e>
     910:	93 fd       	sbrc	r25, 3
     912:	85 91       	lpm	r24, Z+
     914:	93 ff       	sbrs	r25, 3
     916:	81 91       	ld	r24, Z+
     918:	6f 01       	movw	r12, r30
     91a:	85 32       	cpi	r24, 0x25	; 37
     91c:	21 f4       	brne	.+8      	; 0x926 <vfprintf+0x76>
     91e:	b7 01       	movw	r22, r14
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0c d3       	rcall	.+1560   	; 0xf3c <fputc>
     924:	e8 cf       	rjmp	.-48     	; 0x8f6 <vfprintf+0x46>
     926:	51 2c       	mov	r5, r1
     928:	31 2c       	mov	r3, r1
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	20 32       	cpi	r18, 0x20	; 32
     92e:	a0 f4       	brcc	.+40     	; 0x958 <vfprintf+0xa8>
     930:	8b 32       	cpi	r24, 0x2B	; 43
     932:	69 f0       	breq	.+26     	; 0x94e <vfprintf+0x9e>
     934:	30 f4       	brcc	.+12     	; 0x942 <vfprintf+0x92>
     936:	80 32       	cpi	r24, 0x20	; 32
     938:	59 f0       	breq	.+22     	; 0x950 <vfprintf+0xa0>
     93a:	83 32       	cpi	r24, 0x23	; 35
     93c:	69 f4       	brne	.+26     	; 0x958 <vfprintf+0xa8>
     93e:	20 61       	ori	r18, 0x10	; 16
     940:	2c c0       	rjmp	.+88     	; 0x99a <vfprintf+0xea>
     942:	8d 32       	cpi	r24, 0x2D	; 45
     944:	39 f0       	breq	.+14     	; 0x954 <vfprintf+0xa4>
     946:	80 33       	cpi	r24, 0x30	; 48
     948:	39 f4       	brne	.+14     	; 0x958 <vfprintf+0xa8>
     94a:	21 60       	ori	r18, 0x01	; 1
     94c:	26 c0       	rjmp	.+76     	; 0x99a <vfprintf+0xea>
     94e:	22 60       	ori	r18, 0x02	; 2
     950:	24 60       	ori	r18, 0x04	; 4
     952:	23 c0       	rjmp	.+70     	; 0x99a <vfprintf+0xea>
     954:	28 60       	ori	r18, 0x08	; 8
     956:	21 c0       	rjmp	.+66     	; 0x99a <vfprintf+0xea>
     958:	27 fd       	sbrc	r18, 7
     95a:	27 c0       	rjmp	.+78     	; 0x9aa <vfprintf+0xfa>
     95c:	30 ed       	ldi	r19, 0xD0	; 208
     95e:	38 0f       	add	r19, r24
     960:	3a 30       	cpi	r19, 0x0A	; 10
     962:	78 f4       	brcc	.+30     	; 0x982 <vfprintf+0xd2>
     964:	26 ff       	sbrs	r18, 6
     966:	06 c0       	rjmp	.+12     	; 0x974 <vfprintf+0xc4>
     968:	fa e0       	ldi	r31, 0x0A	; 10
     96a:	5f 9e       	mul	r5, r31
     96c:	30 0d       	add	r19, r0
     96e:	11 24       	eor	r1, r1
     970:	53 2e       	mov	r5, r19
     972:	13 c0       	rjmp	.+38     	; 0x99a <vfprintf+0xea>
     974:	8a e0       	ldi	r24, 0x0A	; 10
     976:	38 9e       	mul	r3, r24
     978:	30 0d       	add	r19, r0
     97a:	11 24       	eor	r1, r1
     97c:	33 2e       	mov	r3, r19
     97e:	20 62       	ori	r18, 0x20	; 32
     980:	0c c0       	rjmp	.+24     	; 0x99a <vfprintf+0xea>
     982:	8e 32       	cpi	r24, 0x2E	; 46
     984:	21 f4       	brne	.+8      	; 0x98e <vfprintf+0xde>
     986:	26 fd       	sbrc	r18, 6
     988:	5f c1       	rjmp	.+702    	; 0xc48 <vfprintf+0x398>
     98a:	20 64       	ori	r18, 0x40	; 64
     98c:	06 c0       	rjmp	.+12     	; 0x99a <vfprintf+0xea>
     98e:	8c 36       	cpi	r24, 0x6C	; 108
     990:	11 f4       	brne	.+4      	; 0x996 <vfprintf+0xe6>
     992:	20 68       	ori	r18, 0x80	; 128
     994:	02 c0       	rjmp	.+4      	; 0x99a <vfprintf+0xea>
     996:	88 36       	cpi	r24, 0x68	; 104
     998:	41 f4       	brne	.+16     	; 0x9aa <vfprintf+0xfa>
     99a:	f6 01       	movw	r30, r12
     99c:	93 fd       	sbrc	r25, 3
     99e:	85 91       	lpm	r24, Z+
     9a0:	93 ff       	sbrs	r25, 3
     9a2:	81 91       	ld	r24, Z+
     9a4:	6f 01       	movw	r12, r30
     9a6:	81 11       	cpse	r24, r1
     9a8:	c1 cf       	rjmp	.-126    	; 0x92c <vfprintf+0x7c>
     9aa:	98 2f       	mov	r25, r24
     9ac:	9f 7d       	andi	r25, 0xDF	; 223
     9ae:	95 54       	subi	r25, 0x45	; 69
     9b0:	93 30       	cpi	r25, 0x03	; 3
     9b2:	28 f4       	brcc	.+10     	; 0x9be <vfprintf+0x10e>
     9b4:	0c 5f       	subi	r16, 0xFC	; 252
     9b6:	1f 4f       	sbci	r17, 0xFF	; 255
     9b8:	ff e3       	ldi	r31, 0x3F	; 63
     9ba:	f9 83       	std	Y+1, r31	; 0x01
     9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <vfprintf+0x128>
     9be:	83 36       	cpi	r24, 0x63	; 99
     9c0:	31 f0       	breq	.+12     	; 0x9ce <vfprintf+0x11e>
     9c2:	83 37       	cpi	r24, 0x73	; 115
     9c4:	71 f0       	breq	.+28     	; 0x9e2 <vfprintf+0x132>
     9c6:	83 35       	cpi	r24, 0x53	; 83
     9c8:	09 f0       	breq	.+2      	; 0x9cc <vfprintf+0x11c>
     9ca:	57 c0       	rjmp	.+174    	; 0xa7a <vfprintf+0x1ca>
     9cc:	21 c0       	rjmp	.+66     	; 0xa10 <vfprintf+0x160>
     9ce:	f8 01       	movw	r30, r16
     9d0:	80 81       	ld	r24, Z
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	0e 5f       	subi	r16, 0xFE	; 254
     9d6:	1f 4f       	sbci	r17, 0xFF	; 255
     9d8:	44 24       	eor	r4, r4
     9da:	43 94       	inc	r4
     9dc:	51 2c       	mov	r5, r1
     9de:	54 01       	movw	r10, r8
     9e0:	14 c0       	rjmp	.+40     	; 0xa0a <vfprintf+0x15a>
     9e2:	38 01       	movw	r6, r16
     9e4:	f2 e0       	ldi	r31, 0x02	; 2
     9e6:	6f 0e       	add	r6, r31
     9e8:	71 1c       	adc	r7, r1
     9ea:	f8 01       	movw	r30, r16
     9ec:	a0 80       	ld	r10, Z
     9ee:	b1 80       	ldd	r11, Z+1	; 0x01
     9f0:	26 ff       	sbrs	r18, 6
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <vfprintf+0x14a>
     9f4:	65 2d       	mov	r22, r5
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <vfprintf+0x14e>
     9fa:	6f ef       	ldi	r22, 0xFF	; 255
     9fc:	7f ef       	ldi	r23, 0xFF	; 255
     9fe:	c5 01       	movw	r24, r10
     a00:	2c 87       	std	Y+12, r18	; 0x0c
     a02:	91 d2       	rcall	.+1314   	; 0xf26 <strnlen>
     a04:	2c 01       	movw	r4, r24
     a06:	83 01       	movw	r16, r6
     a08:	2c 85       	ldd	r18, Y+12	; 0x0c
     a0a:	2f 77       	andi	r18, 0x7F	; 127
     a0c:	22 2e       	mov	r2, r18
     a0e:	16 c0       	rjmp	.+44     	; 0xa3c <vfprintf+0x18c>
     a10:	38 01       	movw	r6, r16
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	6f 0e       	add	r6, r31
     a16:	71 1c       	adc	r7, r1
     a18:	f8 01       	movw	r30, r16
     a1a:	a0 80       	ld	r10, Z
     a1c:	b1 80       	ldd	r11, Z+1	; 0x01
     a1e:	26 ff       	sbrs	r18, 6
     a20:	03 c0       	rjmp	.+6      	; 0xa28 <vfprintf+0x178>
     a22:	65 2d       	mov	r22, r5
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <vfprintf+0x17c>
     a28:	6f ef       	ldi	r22, 0xFF	; 255
     a2a:	7f ef       	ldi	r23, 0xFF	; 255
     a2c:	c5 01       	movw	r24, r10
     a2e:	2c 87       	std	Y+12, r18	; 0x0c
     a30:	68 d2       	rcall	.+1232   	; 0xf02 <strnlen_P>
     a32:	2c 01       	movw	r4, r24
     a34:	2c 85       	ldd	r18, Y+12	; 0x0c
     a36:	20 68       	ori	r18, 0x80	; 128
     a38:	22 2e       	mov	r2, r18
     a3a:	83 01       	movw	r16, r6
     a3c:	23 fc       	sbrc	r2, 3
     a3e:	19 c0       	rjmp	.+50     	; 0xa72 <vfprintf+0x1c2>
     a40:	83 2d       	mov	r24, r3
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	48 16       	cp	r4, r24
     a46:	59 06       	cpc	r5, r25
     a48:	a0 f4       	brcc	.+40     	; 0xa72 <vfprintf+0x1c2>
     a4a:	b7 01       	movw	r22, r14
     a4c:	80 e2       	ldi	r24, 0x20	; 32
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	75 d2       	rcall	.+1258   	; 0xf3c <fputc>
     a52:	3a 94       	dec	r3
     a54:	f5 cf       	rjmp	.-22     	; 0xa40 <vfprintf+0x190>
     a56:	f5 01       	movw	r30, r10
     a58:	27 fc       	sbrc	r2, 7
     a5a:	85 91       	lpm	r24, Z+
     a5c:	27 fe       	sbrs	r2, 7
     a5e:	81 91       	ld	r24, Z+
     a60:	5f 01       	movw	r10, r30
     a62:	b7 01       	movw	r22, r14
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	6a d2       	rcall	.+1236   	; 0xf3c <fputc>
     a68:	31 10       	cpse	r3, r1
     a6a:	3a 94       	dec	r3
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	4f 1a       	sub	r4, r31
     a70:	51 08       	sbc	r5, r1
     a72:	41 14       	cp	r4, r1
     a74:	51 04       	cpc	r5, r1
     a76:	79 f7       	brne	.-34     	; 0xa56 <vfprintf+0x1a6>
     a78:	de c0       	rjmp	.+444    	; 0xc36 <vfprintf+0x386>
     a7a:	84 36       	cpi	r24, 0x64	; 100
     a7c:	11 f0       	breq	.+4      	; 0xa82 <vfprintf+0x1d2>
     a7e:	89 36       	cpi	r24, 0x69	; 105
     a80:	31 f5       	brne	.+76     	; 0xace <vfprintf+0x21e>
     a82:	f8 01       	movw	r30, r16
     a84:	27 ff       	sbrs	r18, 7
     a86:	07 c0       	rjmp	.+14     	; 0xa96 <vfprintf+0x1e6>
     a88:	60 81       	ld	r22, Z
     a8a:	71 81       	ldd	r23, Z+1	; 0x01
     a8c:	82 81       	ldd	r24, Z+2	; 0x02
     a8e:	93 81       	ldd	r25, Z+3	; 0x03
     a90:	0c 5f       	subi	r16, 0xFC	; 252
     a92:	1f 4f       	sbci	r17, 0xFF	; 255
     a94:	08 c0       	rjmp	.+16     	; 0xaa6 <vfprintf+0x1f6>
     a96:	60 81       	ld	r22, Z
     a98:	71 81       	ldd	r23, Z+1	; 0x01
     a9a:	88 27       	eor	r24, r24
     a9c:	77 fd       	sbrc	r23, 7
     a9e:	80 95       	com	r24
     aa0:	98 2f       	mov	r25, r24
     aa2:	0e 5f       	subi	r16, 0xFE	; 254
     aa4:	1f 4f       	sbci	r17, 0xFF	; 255
     aa6:	2f 76       	andi	r18, 0x6F	; 111
     aa8:	b2 2e       	mov	r11, r18
     aaa:	97 ff       	sbrs	r25, 7
     aac:	09 c0       	rjmp	.+18     	; 0xac0 <vfprintf+0x210>
     aae:	90 95       	com	r25
     ab0:	80 95       	com	r24
     ab2:	70 95       	com	r23
     ab4:	61 95       	neg	r22
     ab6:	7f 4f       	sbci	r23, 0xFF	; 255
     ab8:	8f 4f       	sbci	r24, 0xFF	; 255
     aba:	9f 4f       	sbci	r25, 0xFF	; 255
     abc:	20 68       	ori	r18, 0x80	; 128
     abe:	b2 2e       	mov	r11, r18
     ac0:	2a e0       	ldi	r18, 0x0A	; 10
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	a4 01       	movw	r20, r8
     ac6:	6c d2       	rcall	.+1240   	; 0xfa0 <__ultoa_invert>
     ac8:	a8 2e       	mov	r10, r24
     aca:	a8 18       	sub	r10, r8
     acc:	43 c0       	rjmp	.+134    	; 0xb54 <vfprintf+0x2a4>
     ace:	85 37       	cpi	r24, 0x75	; 117
     ad0:	29 f4       	brne	.+10     	; 0xadc <vfprintf+0x22c>
     ad2:	2f 7e       	andi	r18, 0xEF	; 239
     ad4:	b2 2e       	mov	r11, r18
     ad6:	2a e0       	ldi	r18, 0x0A	; 10
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	25 c0       	rjmp	.+74     	; 0xb26 <vfprintf+0x276>
     adc:	f2 2f       	mov	r31, r18
     ade:	f9 7f       	andi	r31, 0xF9	; 249
     ae0:	bf 2e       	mov	r11, r31
     ae2:	8f 36       	cpi	r24, 0x6F	; 111
     ae4:	c1 f0       	breq	.+48     	; 0xb16 <vfprintf+0x266>
     ae6:	18 f4       	brcc	.+6      	; 0xaee <vfprintf+0x23e>
     ae8:	88 35       	cpi	r24, 0x58	; 88
     aea:	79 f0       	breq	.+30     	; 0xb0a <vfprintf+0x25a>
     aec:	ad c0       	rjmp	.+346    	; 0xc48 <vfprintf+0x398>
     aee:	80 37       	cpi	r24, 0x70	; 112
     af0:	19 f0       	breq	.+6      	; 0xaf8 <vfprintf+0x248>
     af2:	88 37       	cpi	r24, 0x78	; 120
     af4:	21 f0       	breq	.+8      	; 0xafe <vfprintf+0x24e>
     af6:	a8 c0       	rjmp	.+336    	; 0xc48 <vfprintf+0x398>
     af8:	2f 2f       	mov	r18, r31
     afa:	20 61       	ori	r18, 0x10	; 16
     afc:	b2 2e       	mov	r11, r18
     afe:	b4 fe       	sbrs	r11, 4
     b00:	0d c0       	rjmp	.+26     	; 0xb1c <vfprintf+0x26c>
     b02:	8b 2d       	mov	r24, r11
     b04:	84 60       	ori	r24, 0x04	; 4
     b06:	b8 2e       	mov	r11, r24
     b08:	09 c0       	rjmp	.+18     	; 0xb1c <vfprintf+0x26c>
     b0a:	24 ff       	sbrs	r18, 4
     b0c:	0a c0       	rjmp	.+20     	; 0xb22 <vfprintf+0x272>
     b0e:	9f 2f       	mov	r25, r31
     b10:	96 60       	ori	r25, 0x06	; 6
     b12:	b9 2e       	mov	r11, r25
     b14:	06 c0       	rjmp	.+12     	; 0xb22 <vfprintf+0x272>
     b16:	28 e0       	ldi	r18, 0x08	; 8
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	05 c0       	rjmp	.+10     	; 0xb26 <vfprintf+0x276>
     b1c:	20 e1       	ldi	r18, 0x10	; 16
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x276>
     b22:	20 e1       	ldi	r18, 0x10	; 16
     b24:	32 e0       	ldi	r19, 0x02	; 2
     b26:	f8 01       	movw	r30, r16
     b28:	b7 fe       	sbrs	r11, 7
     b2a:	07 c0       	rjmp	.+14     	; 0xb3a <vfprintf+0x28a>
     b2c:	60 81       	ld	r22, Z
     b2e:	71 81       	ldd	r23, Z+1	; 0x01
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	93 81       	ldd	r25, Z+3	; 0x03
     b34:	0c 5f       	subi	r16, 0xFC	; 252
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	06 c0       	rjmp	.+12     	; 0xb46 <vfprintf+0x296>
     b3a:	60 81       	ld	r22, Z
     b3c:	71 81       	ldd	r23, Z+1	; 0x01
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 5f       	subi	r16, 0xFE	; 254
     b44:	1f 4f       	sbci	r17, 0xFF	; 255
     b46:	a4 01       	movw	r20, r8
     b48:	2b d2       	rcall	.+1110   	; 0xfa0 <__ultoa_invert>
     b4a:	a8 2e       	mov	r10, r24
     b4c:	a8 18       	sub	r10, r8
     b4e:	fb 2d       	mov	r31, r11
     b50:	ff 77       	andi	r31, 0x7F	; 127
     b52:	bf 2e       	mov	r11, r31
     b54:	b6 fe       	sbrs	r11, 6
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <vfprintf+0x2be>
     b58:	2b 2d       	mov	r18, r11
     b5a:	2e 7f       	andi	r18, 0xFE	; 254
     b5c:	a5 14       	cp	r10, r5
     b5e:	50 f4       	brcc	.+20     	; 0xb74 <vfprintf+0x2c4>
     b60:	b4 fe       	sbrs	r11, 4
     b62:	0a c0       	rjmp	.+20     	; 0xb78 <vfprintf+0x2c8>
     b64:	b2 fc       	sbrc	r11, 2
     b66:	08 c0       	rjmp	.+16     	; 0xb78 <vfprintf+0x2c8>
     b68:	2b 2d       	mov	r18, r11
     b6a:	2e 7e       	andi	r18, 0xEE	; 238
     b6c:	05 c0       	rjmp	.+10     	; 0xb78 <vfprintf+0x2c8>
     b6e:	7a 2c       	mov	r7, r10
     b70:	2b 2d       	mov	r18, r11
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <vfprintf+0x2ca>
     b74:	7a 2c       	mov	r7, r10
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <vfprintf+0x2ca>
     b78:	75 2c       	mov	r7, r5
     b7a:	24 ff       	sbrs	r18, 4
     b7c:	0d c0       	rjmp	.+26     	; 0xb98 <vfprintf+0x2e8>
     b7e:	fe 01       	movw	r30, r28
     b80:	ea 0d       	add	r30, r10
     b82:	f1 1d       	adc	r31, r1
     b84:	80 81       	ld	r24, Z
     b86:	80 33       	cpi	r24, 0x30	; 48
     b88:	11 f4       	brne	.+4      	; 0xb8e <vfprintf+0x2de>
     b8a:	29 7e       	andi	r18, 0xE9	; 233
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <vfprintf+0x2f0>
     b8e:	22 ff       	sbrs	r18, 2
     b90:	06 c0       	rjmp	.+12     	; 0xb9e <vfprintf+0x2ee>
     b92:	73 94       	inc	r7
     b94:	73 94       	inc	r7
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <vfprintf+0x2f0>
     b98:	82 2f       	mov	r24, r18
     b9a:	86 78       	andi	r24, 0x86	; 134
     b9c:	09 f0       	breq	.+2      	; 0xba0 <vfprintf+0x2f0>
     b9e:	73 94       	inc	r7
     ba0:	23 fd       	sbrc	r18, 3
     ba2:	12 c0       	rjmp	.+36     	; 0xbc8 <vfprintf+0x318>
     ba4:	20 ff       	sbrs	r18, 0
     ba6:	06 c0       	rjmp	.+12     	; 0xbb4 <vfprintf+0x304>
     ba8:	5a 2c       	mov	r5, r10
     baa:	73 14       	cp	r7, r3
     bac:	18 f4       	brcc	.+6      	; 0xbb4 <vfprintf+0x304>
     bae:	53 0c       	add	r5, r3
     bb0:	57 18       	sub	r5, r7
     bb2:	73 2c       	mov	r7, r3
     bb4:	73 14       	cp	r7, r3
     bb6:	60 f4       	brcc	.+24     	; 0xbd0 <vfprintf+0x320>
     bb8:	b7 01       	movw	r22, r14
     bba:	80 e2       	ldi	r24, 0x20	; 32
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	2c 87       	std	Y+12, r18	; 0x0c
     bc0:	bd d1       	rcall	.+890    	; 0xf3c <fputc>
     bc2:	73 94       	inc	r7
     bc4:	2c 85       	ldd	r18, Y+12	; 0x0c
     bc6:	f6 cf       	rjmp	.-20     	; 0xbb4 <vfprintf+0x304>
     bc8:	73 14       	cp	r7, r3
     bca:	10 f4       	brcc	.+4      	; 0xbd0 <vfprintf+0x320>
     bcc:	37 18       	sub	r3, r7
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <vfprintf+0x322>
     bd0:	31 2c       	mov	r3, r1
     bd2:	24 ff       	sbrs	r18, 4
     bd4:	11 c0       	rjmp	.+34     	; 0xbf8 <vfprintf+0x348>
     bd6:	b7 01       	movw	r22, r14
     bd8:	80 e3       	ldi	r24, 0x30	; 48
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	2c 87       	std	Y+12, r18	; 0x0c
     bde:	ae d1       	rcall	.+860    	; 0xf3c <fputc>
     be0:	2c 85       	ldd	r18, Y+12	; 0x0c
     be2:	22 ff       	sbrs	r18, 2
     be4:	16 c0       	rjmp	.+44     	; 0xc12 <vfprintf+0x362>
     be6:	21 ff       	sbrs	r18, 1
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <vfprintf+0x340>
     bea:	88 e5       	ldi	r24, 0x58	; 88
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0x344>
     bf0:	88 e7       	ldi	r24, 0x78	; 120
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	b7 01       	movw	r22, r14
     bf6:	0c c0       	rjmp	.+24     	; 0xc10 <vfprintf+0x360>
     bf8:	82 2f       	mov	r24, r18
     bfa:	86 78       	andi	r24, 0x86	; 134
     bfc:	51 f0       	breq	.+20     	; 0xc12 <vfprintf+0x362>
     bfe:	21 fd       	sbrc	r18, 1
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <vfprintf+0x356>
     c02:	80 e2       	ldi	r24, 0x20	; 32
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <vfprintf+0x358>
     c06:	8b e2       	ldi	r24, 0x2B	; 43
     c08:	27 fd       	sbrc	r18, 7
     c0a:	8d e2       	ldi	r24, 0x2D	; 45
     c0c:	b7 01       	movw	r22, r14
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	95 d1       	rcall	.+810    	; 0xf3c <fputc>
     c12:	a5 14       	cp	r10, r5
     c14:	30 f4       	brcc	.+12     	; 0xc22 <vfprintf+0x372>
     c16:	b7 01       	movw	r22, r14
     c18:	80 e3       	ldi	r24, 0x30	; 48
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	8f d1       	rcall	.+798    	; 0xf3c <fputc>
     c1e:	5a 94       	dec	r5
     c20:	f8 cf       	rjmp	.-16     	; 0xc12 <vfprintf+0x362>
     c22:	aa 94       	dec	r10
     c24:	f4 01       	movw	r30, r8
     c26:	ea 0d       	add	r30, r10
     c28:	f1 1d       	adc	r31, r1
     c2a:	80 81       	ld	r24, Z
     c2c:	b7 01       	movw	r22, r14
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	85 d1       	rcall	.+778    	; 0xf3c <fputc>
     c32:	a1 10       	cpse	r10, r1
     c34:	f6 cf       	rjmp	.-20     	; 0xc22 <vfprintf+0x372>
     c36:	33 20       	and	r3, r3
     c38:	09 f4       	brne	.+2      	; 0xc3c <vfprintf+0x38c>
     c3a:	5d ce       	rjmp	.-838    	; 0x8f6 <vfprintf+0x46>
     c3c:	b7 01       	movw	r22, r14
     c3e:	80 e2       	ldi	r24, 0x20	; 32
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	7c d1       	rcall	.+760    	; 0xf3c <fputc>
     c44:	3a 94       	dec	r3
     c46:	f7 cf       	rjmp	.-18     	; 0xc36 <vfprintf+0x386>
     c48:	f7 01       	movw	r30, r14
     c4a:	86 81       	ldd	r24, Z+6	; 0x06
     c4c:	97 81       	ldd	r25, Z+7	; 0x07
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x3a4>
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	2c 96       	adiw	r28, 0x0c	; 12
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	9f 90       	pop	r9
     c70:	8f 90       	pop	r8
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	5f 90       	pop	r5
     c78:	4f 90       	pop	r4
     c7a:	3f 90       	pop	r3
     c7c:	2f 90       	pop	r2
     c7e:	08 95       	ret

00000c80 <calloc>:
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	86 9f       	mul	r24, r22
     c8a:	80 01       	movw	r16, r0
     c8c:	87 9f       	mul	r24, r23
     c8e:	10 0d       	add	r17, r0
     c90:	96 9f       	mul	r25, r22
     c92:	10 0d       	add	r17, r0
     c94:	11 24       	eor	r1, r1
     c96:	c8 01       	movw	r24, r16
     c98:	0d d0       	rcall	.+26     	; 0xcb4 <malloc>
     c9a:	ec 01       	movw	r28, r24
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	21 f0       	breq	.+8      	; 0xca8 <calloc+0x28>
     ca0:	a8 01       	movw	r20, r16
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	38 d1       	rcall	.+624    	; 0xf18 <memset>
     ca8:	ce 01       	movw	r24, r28
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret

00000cb4 <malloc>:
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	91 05       	cpc	r25, r1
     cbc:	10 f4       	brcc	.+4      	; 0xcc2 <malloc+0xe>
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	e0 91 20 20 	lds	r30, 0x2020
     cc6:	f0 91 21 20 	lds	r31, 0x2021
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	a0 e0       	ldi	r26, 0x00	; 0
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	30 97       	sbiw	r30, 0x00	; 0
     cd4:	39 f1       	breq	.+78     	; 0xd24 <malloc+0x70>
     cd6:	40 81       	ld	r20, Z
     cd8:	51 81       	ldd	r21, Z+1	; 0x01
     cda:	48 17       	cp	r20, r24
     cdc:	59 07       	cpc	r21, r25
     cde:	b8 f0       	brcs	.+46     	; 0xd0e <malloc+0x5a>
     ce0:	48 17       	cp	r20, r24
     ce2:	59 07       	cpc	r21, r25
     ce4:	71 f4       	brne	.+28     	; 0xd02 <malloc+0x4e>
     ce6:	82 81       	ldd	r24, Z+2	; 0x02
     ce8:	93 81       	ldd	r25, Z+3	; 0x03
     cea:	10 97       	sbiw	r26, 0x00	; 0
     cec:	29 f0       	breq	.+10     	; 0xcf8 <malloc+0x44>
     cee:	12 96       	adiw	r26, 0x02	; 2
     cf0:	8d 93       	st	X+, r24
     cf2:	9c 93       	st	X, r25
     cf4:	13 97       	sbiw	r26, 0x03	; 3
     cf6:	2c c0       	rjmp	.+88     	; 0xd50 <malloc+0x9c>
     cf8:	80 93 20 20 	sts	0x2020, r24
     cfc:	90 93 21 20 	sts	0x2021, r25
     d00:	27 c0       	rjmp	.+78     	; 0xd50 <malloc+0x9c>
     d02:	21 15       	cp	r18, r1
     d04:	31 05       	cpc	r19, r1
     d06:	31 f0       	breq	.+12     	; 0xd14 <malloc+0x60>
     d08:	42 17       	cp	r20, r18
     d0a:	53 07       	cpc	r21, r19
     d0c:	18 f0       	brcs	.+6      	; 0xd14 <malloc+0x60>
     d0e:	a9 01       	movw	r20, r18
     d10:	db 01       	movw	r26, r22
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <malloc+0x62>
     d14:	ef 01       	movw	r28, r30
     d16:	9a 01       	movw	r18, r20
     d18:	bd 01       	movw	r22, r26
     d1a:	df 01       	movw	r26, r30
     d1c:	02 80       	ldd	r0, Z+2	; 0x02
     d1e:	f3 81       	ldd	r31, Z+3	; 0x03
     d20:	e0 2d       	mov	r30, r0
     d22:	d7 cf       	rjmp	.-82     	; 0xcd2 <malloc+0x1e>
     d24:	21 15       	cp	r18, r1
     d26:	31 05       	cpc	r19, r1
     d28:	f9 f0       	breq	.+62     	; 0xd68 <malloc+0xb4>
     d2a:	28 1b       	sub	r18, r24
     d2c:	39 0b       	sbc	r19, r25
     d2e:	24 30       	cpi	r18, 0x04	; 4
     d30:	31 05       	cpc	r19, r1
     d32:	80 f4       	brcc	.+32     	; 0xd54 <malloc+0xa0>
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	9b 81       	ldd	r25, Y+3	; 0x03
     d38:	61 15       	cp	r22, r1
     d3a:	71 05       	cpc	r23, r1
     d3c:	21 f0       	breq	.+8      	; 0xd46 <malloc+0x92>
     d3e:	fb 01       	movw	r30, r22
     d40:	82 83       	std	Z+2, r24	; 0x02
     d42:	93 83       	std	Z+3, r25	; 0x03
     d44:	04 c0       	rjmp	.+8      	; 0xd4e <malloc+0x9a>
     d46:	80 93 20 20 	sts	0x2020, r24
     d4a:	90 93 21 20 	sts	0x2021, r25
     d4e:	fe 01       	movw	r30, r28
     d50:	32 96       	adiw	r30, 0x02	; 2
     d52:	44 c0       	rjmp	.+136    	; 0xddc <malloc+0x128>
     d54:	fe 01       	movw	r30, r28
     d56:	e2 0f       	add	r30, r18
     d58:	f3 1f       	adc	r31, r19
     d5a:	81 93       	st	Z+, r24
     d5c:	91 93       	st	Z+, r25
     d5e:	22 50       	subi	r18, 0x02	; 2
     d60:	31 09       	sbc	r19, r1
     d62:	28 83       	st	Y, r18
     d64:	39 83       	std	Y+1, r19	; 0x01
     d66:	3a c0       	rjmp	.+116    	; 0xddc <malloc+0x128>
     d68:	20 91 1e 20 	lds	r18, 0x201E
     d6c:	30 91 1f 20 	lds	r19, 0x201F
     d70:	23 2b       	or	r18, r19
     d72:	41 f4       	brne	.+16     	; 0xd84 <malloc+0xd0>
     d74:	20 91 02 20 	lds	r18, 0x2002
     d78:	30 91 03 20 	lds	r19, 0x2003
     d7c:	20 93 1e 20 	sts	0x201E, r18
     d80:	30 93 1f 20 	sts	0x201F, r19
     d84:	20 91 00 20 	lds	r18, 0x2000
     d88:	30 91 01 20 	lds	r19, 0x2001
     d8c:	21 15       	cp	r18, r1
     d8e:	31 05       	cpc	r19, r1
     d90:	41 f4       	brne	.+16     	; 0xda2 <malloc+0xee>
     d92:	2d b7       	in	r18, 0x3d	; 61
     d94:	3e b7       	in	r19, 0x3e	; 62
     d96:	40 91 04 20 	lds	r20, 0x2004
     d9a:	50 91 05 20 	lds	r21, 0x2005
     d9e:	24 1b       	sub	r18, r20
     da0:	35 0b       	sbc	r19, r21
     da2:	e0 91 1e 20 	lds	r30, 0x201E
     da6:	f0 91 1f 20 	lds	r31, 0x201F
     daa:	e2 17       	cp	r30, r18
     dac:	f3 07       	cpc	r31, r19
     dae:	a0 f4       	brcc	.+40     	; 0xdd8 <malloc+0x124>
     db0:	2e 1b       	sub	r18, r30
     db2:	3f 0b       	sbc	r19, r31
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	78 f0       	brcs	.+30     	; 0xdd8 <malloc+0x124>
     dba:	ac 01       	movw	r20, r24
     dbc:	4e 5f       	subi	r20, 0xFE	; 254
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	24 17       	cp	r18, r20
     dc2:	35 07       	cpc	r19, r21
     dc4:	48 f0       	brcs	.+18     	; 0xdd8 <malloc+0x124>
     dc6:	4e 0f       	add	r20, r30
     dc8:	5f 1f       	adc	r21, r31
     dca:	40 93 1e 20 	sts	0x201E, r20
     dce:	50 93 1f 20 	sts	0x201F, r21
     dd2:	81 93       	st	Z+, r24
     dd4:	91 93       	st	Z+, r25
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <malloc+0x128>
     dd8:	e0 e0       	ldi	r30, 0x00	; 0
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	cf 01       	movw	r24, r30
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <free>:
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	09 f4       	brne	.+2      	; 0xdee <free+0xa>
     dec:	87 c0       	rjmp	.+270    	; 0xefc <free+0x118>
     dee:	fc 01       	movw	r30, r24
     df0:	32 97       	sbiw	r30, 0x02	; 2
     df2:	12 82       	std	Z+2, r1	; 0x02
     df4:	13 82       	std	Z+3, r1	; 0x03
     df6:	c0 91 20 20 	lds	r28, 0x2020
     dfa:	d0 91 21 20 	lds	r29, 0x2021
     dfe:	20 97       	sbiw	r28, 0x00	; 0
     e00:	81 f4       	brne	.+32     	; 0xe22 <free+0x3e>
     e02:	20 81       	ld	r18, Z
     e04:	31 81       	ldd	r19, Z+1	; 0x01
     e06:	28 0f       	add	r18, r24
     e08:	39 1f       	adc	r19, r25
     e0a:	80 91 1e 20 	lds	r24, 0x201E
     e0e:	90 91 1f 20 	lds	r25, 0x201F
     e12:	82 17       	cp	r24, r18
     e14:	93 07       	cpc	r25, r19
     e16:	79 f5       	brne	.+94     	; 0xe76 <free+0x92>
     e18:	e0 93 1e 20 	sts	0x201E, r30
     e1c:	f0 93 1f 20 	sts	0x201F, r31
     e20:	6d c0       	rjmp	.+218    	; 0xefc <free+0x118>
     e22:	de 01       	movw	r26, r28
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	ae 17       	cp	r26, r30
     e2a:	bf 07       	cpc	r27, r31
     e2c:	50 f4       	brcc	.+20     	; 0xe42 <free+0x5e>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	4d 91       	ld	r20, X+
     e32:	5c 91       	ld	r21, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	9d 01       	movw	r18, r26
     e38:	41 15       	cp	r20, r1
     e3a:	51 05       	cpc	r21, r1
     e3c:	09 f1       	breq	.+66     	; 0xe80 <free+0x9c>
     e3e:	da 01       	movw	r26, r20
     e40:	f3 cf       	rjmp	.-26     	; 0xe28 <free+0x44>
     e42:	a2 83       	std	Z+2, r26	; 0x02
     e44:	b3 83       	std	Z+3, r27	; 0x03
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	84 0f       	add	r24, r20
     e4c:	95 1f       	adc	r25, r21
     e4e:	8a 17       	cp	r24, r26
     e50:	9b 07       	cpc	r25, r27
     e52:	71 f4       	brne	.+28     	; 0xe70 <free+0x8c>
     e54:	8d 91       	ld	r24, X+
     e56:	9c 91       	ld	r25, X
     e58:	11 97       	sbiw	r26, 0x01	; 1
     e5a:	84 0f       	add	r24, r20
     e5c:	95 1f       	adc	r25, r21
     e5e:	02 96       	adiw	r24, 0x02	; 2
     e60:	80 83       	st	Z, r24
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	12 96       	adiw	r26, 0x02	; 2
     e66:	8d 91       	ld	r24, X+
     e68:	9c 91       	ld	r25, X
     e6a:	13 97       	sbiw	r26, 0x03	; 3
     e6c:	82 83       	std	Z+2, r24	; 0x02
     e6e:	93 83       	std	Z+3, r25	; 0x03
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	29 f4       	brne	.+10     	; 0xe80 <free+0x9c>
     e76:	e0 93 20 20 	sts	0x2020, r30
     e7a:	f0 93 21 20 	sts	0x2021, r31
     e7e:	3e c0       	rjmp	.+124    	; 0xefc <free+0x118>
     e80:	d9 01       	movw	r26, r18
     e82:	12 96       	adiw	r26, 0x02	; 2
     e84:	ed 93       	st	X+, r30
     e86:	fc 93       	st	X, r31
     e88:	13 97       	sbiw	r26, 0x03	; 3
     e8a:	4d 91       	ld	r20, X+
     e8c:	5d 91       	ld	r21, X+
     e8e:	a4 0f       	add	r26, r20
     e90:	b5 1f       	adc	r27, r21
     e92:	ea 17       	cp	r30, r26
     e94:	fb 07       	cpc	r31, r27
     e96:	79 f4       	brne	.+30     	; 0xeb6 <free+0xd2>
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	84 0f       	add	r24, r20
     e9e:	95 1f       	adc	r25, r21
     ea0:	02 96       	adiw	r24, 0x02	; 2
     ea2:	d9 01       	movw	r26, r18
     ea4:	8d 93       	st	X+, r24
     ea6:	9c 93       	st	X, r25
     ea8:	11 97       	sbiw	r26, 0x01	; 1
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	93 81       	ldd	r25, Z+3	; 0x03
     eae:	12 96       	adiw	r26, 0x02	; 2
     eb0:	8d 93       	st	X+, r24
     eb2:	9c 93       	st	X, r25
     eb4:	13 97       	sbiw	r26, 0x03	; 3
     eb6:	e0 e0       	ldi	r30, 0x00	; 0
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	9b 81       	ldd	r25, Y+3	; 0x03
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	19 f0       	breq	.+6      	; 0xec8 <free+0xe4>
     ec2:	fe 01       	movw	r30, r28
     ec4:	ec 01       	movw	r28, r24
     ec6:	f9 cf       	rjmp	.-14     	; 0xeba <free+0xd6>
     ec8:	ce 01       	movw	r24, r28
     eca:	02 96       	adiw	r24, 0x02	; 2
     ecc:	28 81       	ld	r18, Y
     ece:	39 81       	ldd	r19, Y+1	; 0x01
     ed0:	82 0f       	add	r24, r18
     ed2:	93 1f       	adc	r25, r19
     ed4:	20 91 1e 20 	lds	r18, 0x201E
     ed8:	30 91 1f 20 	lds	r19, 0x201F
     edc:	28 17       	cp	r18, r24
     ede:	39 07       	cpc	r19, r25
     ee0:	69 f4       	brne	.+26     	; 0xefc <free+0x118>
     ee2:	30 97       	sbiw	r30, 0x00	; 0
     ee4:	29 f4       	brne	.+10     	; 0xef0 <free+0x10c>
     ee6:	10 92 20 20 	sts	0x2020, r1
     eea:	10 92 21 20 	sts	0x2021, r1
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <free+0x110>
     ef0:	12 82       	std	Z+2, r1	; 0x02
     ef2:	13 82       	std	Z+3, r1	; 0x03
     ef4:	c0 93 1e 20 	sts	0x201E, r28
     ef8:	d0 93 1f 20 	sts	0x201F, r29
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <strnlen_P>:
     f02:	fc 01       	movw	r30, r24
     f04:	05 90       	lpm	r0, Z+
     f06:	61 50       	subi	r22, 0x01	; 1
     f08:	70 40       	sbci	r23, 0x00	; 0
     f0a:	01 10       	cpse	r0, r1
     f0c:	d8 f7       	brcc	.-10     	; 0xf04 <strnlen_P+0x2>
     f0e:	80 95       	com	r24
     f10:	90 95       	com	r25
     f12:	8e 0f       	add	r24, r30
     f14:	9f 1f       	adc	r25, r31
     f16:	08 95       	ret

00000f18 <memset>:
     f18:	dc 01       	movw	r26, r24
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <memset+0x6>
     f1c:	6d 93       	st	X+, r22
     f1e:	41 50       	subi	r20, 0x01	; 1
     f20:	50 40       	sbci	r21, 0x00	; 0
     f22:	e0 f7       	brcc	.-8      	; 0xf1c <memset+0x4>
     f24:	08 95       	ret

00000f26 <strnlen>:
     f26:	fc 01       	movw	r30, r24
     f28:	61 50       	subi	r22, 0x01	; 1
     f2a:	70 40       	sbci	r23, 0x00	; 0
     f2c:	01 90       	ld	r0, Z+
     f2e:	01 10       	cpse	r0, r1
     f30:	d8 f7       	brcc	.-10     	; 0xf28 <strnlen+0x2>
     f32:	80 95       	com	r24
     f34:	90 95       	com	r25
     f36:	8e 0f       	add	r24, r30
     f38:	9f 1f       	adc	r25, r31
     f3a:	08 95       	ret

00000f3c <fputc>:
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	18 2f       	mov	r17, r24
     f46:	09 2f       	mov	r16, r25
     f48:	eb 01       	movw	r28, r22
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	81 fd       	sbrc	r24, 1
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <fputc+0x1a>
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	20 c0       	rjmp	.+64     	; 0xf96 <fputc+0x5a>
     f56:	82 ff       	sbrs	r24, 2
     f58:	10 c0       	rjmp	.+32     	; 0xf7a <fputc+0x3e>
     f5a:	4e 81       	ldd	r20, Y+6	; 0x06
     f5c:	5f 81       	ldd	r21, Y+7	; 0x07
     f5e:	2c 81       	ldd	r18, Y+4	; 0x04
     f60:	3d 81       	ldd	r19, Y+5	; 0x05
     f62:	42 17       	cp	r20, r18
     f64:	53 07       	cpc	r21, r19
     f66:	7c f4       	brge	.+30     	; 0xf86 <fputc+0x4a>
     f68:	e8 81       	ld	r30, Y
     f6a:	f9 81       	ldd	r31, Y+1	; 0x01
     f6c:	9f 01       	movw	r18, r30
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	28 83       	st	Y, r18
     f74:	39 83       	std	Y+1, r19	; 0x01
     f76:	10 83       	st	Z, r17
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <fputc+0x4a>
     f7a:	e8 85       	ldd	r30, Y+8	; 0x08
     f7c:	f9 85       	ldd	r31, Y+9	; 0x09
     f7e:	81 2f       	mov	r24, r17
     f80:	19 95       	eicall
     f82:	89 2b       	or	r24, r25
     f84:	29 f7       	brne	.-54     	; 0xf50 <fputc+0x14>
     f86:	2e 81       	ldd	r18, Y+6	; 0x06
     f88:	3f 81       	ldd	r19, Y+7	; 0x07
     f8a:	2f 5f       	subi	r18, 0xFF	; 255
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	2e 83       	std	Y+6, r18	; 0x06
     f90:	3f 83       	std	Y+7, r19	; 0x07
     f92:	81 2f       	mov	r24, r17
     f94:	90 2f       	mov	r25, r16
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <__ultoa_invert>:
     fa0:	fa 01       	movw	r30, r20
     fa2:	aa 27       	eor	r26, r26
     fa4:	28 30       	cpi	r18, 0x08	; 8
     fa6:	51 f1       	breq	.+84     	; 0xffc <__ultoa_invert+0x5c>
     fa8:	20 31       	cpi	r18, 0x10	; 16
     faa:	81 f1       	breq	.+96     	; 0x100c <__ultoa_invert+0x6c>
     fac:	e8 94       	clt
     fae:	6f 93       	push	r22
     fb0:	6e 7f       	andi	r22, 0xFE	; 254
     fb2:	6e 5f       	subi	r22, 0xFE	; 254
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	af 4f       	sbci	r26, 0xFF	; 255
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	3e d0       	rcall	.+124    	; 0x103c <__ultoa_invert+0x9c>
     fc0:	b4 e0       	ldi	r27, 0x04	; 4
     fc2:	3c d0       	rcall	.+120    	; 0x103c <__ultoa_invert+0x9c>
     fc4:	67 0f       	add	r22, r23
     fc6:	78 1f       	adc	r23, r24
     fc8:	89 1f       	adc	r24, r25
     fca:	9a 1f       	adc	r25, r26
     fcc:	a1 1d       	adc	r26, r1
     fce:	68 0f       	add	r22, r24
     fd0:	79 1f       	adc	r23, r25
     fd2:	8a 1f       	adc	r24, r26
     fd4:	91 1d       	adc	r25, r1
     fd6:	a1 1d       	adc	r26, r1
     fd8:	6a 0f       	add	r22, r26
     fda:	71 1d       	adc	r23, r1
     fdc:	81 1d       	adc	r24, r1
     fde:	91 1d       	adc	r25, r1
     fe0:	a1 1d       	adc	r26, r1
     fe2:	20 d0       	rcall	.+64     	; 0x1024 <__ultoa_invert+0x84>
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <__ultoa_invert+0x48>
     fe6:	68 94       	set
     fe8:	3f 91       	pop	r19
     fea:	2a e0       	ldi	r18, 0x0A	; 10
     fec:	26 9f       	mul	r18, r22
     fee:	11 24       	eor	r1, r1
     ff0:	30 19       	sub	r19, r0
     ff2:	30 5d       	subi	r19, 0xD0	; 208
     ff4:	31 93       	st	Z+, r19
     ff6:	de f6       	brtc	.-74     	; 0xfae <__ultoa_invert+0xe>
     ff8:	cf 01       	movw	r24, r30
     ffa:	08 95       	ret
     ffc:	46 2f       	mov	r20, r22
     ffe:	47 70       	andi	r20, 0x07	; 7
    1000:	40 5d       	subi	r20, 0xD0	; 208
    1002:	41 93       	st	Z+, r20
    1004:	b3 e0       	ldi	r27, 0x03	; 3
    1006:	0f d0       	rcall	.+30     	; 0x1026 <__ultoa_invert+0x86>
    1008:	c9 f7       	brne	.-14     	; 0xffc <__ultoa_invert+0x5c>
    100a:	f6 cf       	rjmp	.-20     	; 0xff8 <__ultoa_invert+0x58>
    100c:	46 2f       	mov	r20, r22
    100e:	4f 70       	andi	r20, 0x0F	; 15
    1010:	40 5d       	subi	r20, 0xD0	; 208
    1012:	4a 33       	cpi	r20, 0x3A	; 58
    1014:	18 f0       	brcs	.+6      	; 0x101c <__ultoa_invert+0x7c>
    1016:	49 5d       	subi	r20, 0xD9	; 217
    1018:	31 fd       	sbrc	r19, 1
    101a:	40 52       	subi	r20, 0x20	; 32
    101c:	41 93       	st	Z+, r20
    101e:	02 d0       	rcall	.+4      	; 0x1024 <__ultoa_invert+0x84>
    1020:	a9 f7       	brne	.-22     	; 0x100c <__ultoa_invert+0x6c>
    1022:	ea cf       	rjmp	.-44     	; 0xff8 <__ultoa_invert+0x58>
    1024:	b4 e0       	ldi	r27, 0x04	; 4
    1026:	a6 95       	lsr	r26
    1028:	97 95       	ror	r25
    102a:	87 95       	ror	r24
    102c:	77 95       	ror	r23
    102e:	67 95       	ror	r22
    1030:	ba 95       	dec	r27
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__ultoa_invert+0x86>
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	61 05       	cpc	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	08 95       	ret
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	0a 2e       	mov	r0, r26
    1042:	06 94       	lsr	r0
    1044:	57 95       	ror	r21
    1046:	47 95       	ror	r20
    1048:	37 95       	ror	r19
    104a:	27 95       	ror	r18
    104c:	ba 95       	dec	r27
    104e:	c9 f7       	brne	.-14     	; 0x1042 <__ultoa_invert+0xa2>
    1050:	62 0f       	add	r22, r18
    1052:	73 1f       	adc	r23, r19
    1054:	84 1f       	adc	r24, r20
    1056:	95 1f       	adc	r25, r21
    1058:	a0 1d       	adc	r26, r0
    105a:	08 95       	ret

0000105c <_exit>:
    105c:	f8 94       	cli

0000105e <__stop_program>:
    105e:	ff cf       	rjmp	.-2      	; 0x105e <__stop_program>
